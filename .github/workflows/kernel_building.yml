name: Build Kernel

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 6'   # 每周六0点运行
  push:
    branches:
      - '*'              # 匹配所有分支
  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      TOOLCHAIN_DIR: ${{ github.workspace }}/toolchains
      KERNEL_DEFCONFIG: "camellia_defconfig"
      ARCH: arm64
      SUBARCH: arm64
      KBUILD_BUILD_USER: "builder"
      KBUILD_BUILD_HOST: "hrldhr-build-component-vendor-11-camellia-cn-0721xm"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 100

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi binutils make python3 libssl-dev build-essential bc bison flex unzip ca-certificates xz-utils cpio device-tree-compiler git git-lfs

      - name: Clone toolchains
        run: |
          mkdir -p $TOOLCHAIN_DIR
          if [ ! -d "$TOOLCHAIN_DIR/proton-clang/bin" ]; then
            git clone --depth=1 https://github.com/kdrag0n/proton-clang "$TOOLCHAIN_DIR/proton-clang"
          else
            echo "[!] Skipping Proton Clang clone, already exists."
          fi
          if [ ! -d "$TOOLCHAIN_DIR/gcc/bin" ]; then
            git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 "$TOOLCHAIN_DIR/gcc"
          else
            echo "[!] Skipping GCC64 clone, already exists."
          fi
          if [ ! -d "$TOOLCHAIN_DIR/gcc32/bin" ]; then
            git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 "$TOOLCHAIN_DIR/gcc32"
          else
            echo "[!] Skipping GCC32 clone, already exists."
          fi

      - name: Setup PATH
        run: |
          echo "${{ env.TOOLCHAIN_DIR }}/proton-clang/bin" >> $GITHUB_PATH
          echo "${{ env.TOOLCHAIN_DIR }}/gcc/bin" >> $GITHUB_PATH
          echo "${{ env.TOOLCHAIN_DIR }}/gcc32/bin" >> $GITHUB_PATH

      - name: Build Kernel
        run: |
          make clean
          make mrproper
          make O=out ARCH=${{ env.ARCH }} ${{ env.KERNEL_DEFCONFIG }}
          make -j$(nproc) O=out ARCH=${{ env.ARCH }} \
            CC=clang \
            LD=ld.lld \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-android- \
            CROSS_COMPILE_ARM32=arm-linux-androideabi-
            LOCALVERSION=-g5799a62cc17b
      - name: Package kernel
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3 -b master AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [[ -f out/arch/arm64/boot/dts/mediatek/camellia.dtb ]]; then
            cp out/arch/arm64/boot/dts/mediatek/camellia.dtb AnyKernel3/camellia.dtb
          fi
          
      - name: Compress out directory
        run: tar -czf out_directory.tar.gz out/

      - name: Upload out directory
        uses: actions/upload-artifact@v4
        with:
          name: out-directory
          path: out_directory.tar.gz
      
      - name: Upload Kernel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-kernel
          path: AnyKernel3/*
